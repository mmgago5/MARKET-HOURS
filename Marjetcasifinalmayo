<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Market Session Tracker</title>
  <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-900 text-white">
  <div class="p-4 text-center text-xl font-bold" id="clock"></div>
  <div class="p-4 text-center">
    <label for="timezone" class="mr-2">Zona horaria:</label>
    <select id="timezone" class="text-black px-2 py-1 rounded">
      <option value="America/Montevideo">Uruguay</option>
      <option value="UTC">UTC</option>
      <option value="America/New_York">Nueva York</option>
      <option value="Europe/London">Londres</option>
      <option value="Asia/Tokyo">Tokio</option>
      <option value="Australia/Sydney">Sídney</option>
    </select>
  </div>
  <div id="root" class="p-6"></div>

  <script type="text/babel">
    const sessions = [
      { name: 'Tokio', tz: 'Asia/Tokyo', start: "09:00", end: "15:30", color: 'bg-blue-500' },
      { name: 'Sídney', tz: 'Australia/Sydney', start: "09:00", end: "16:00", color: 'bg-yellow-500' },
      { name: 'Londres', tz: 'Europe/London', start: "08:00", end: "16:30", color: 'bg-green-500' },
      { name: 'Nueva York', tz: 'America/New_York', start: "09:30", end: "16:00", color: 'bg-red-500' },
      { name: 'NASDAQ', tz: 'America/New_York', start: "09:30", end: "16:00", color: 'bg-purple-500' },
    ];

    function parseTime(t, tz, targetTz) {
      const [h, m] = t.split(":");
      const date = new Date();
      date.setUTCHours(0, 0, 0, 0);
      date.setHours(h, m);
      const utcTime = new Date(date.toLocaleString("en-US", { timeZone: tz }));
      return new Date(utcTime.toLocaleString("en-US", { timeZone: targetTz }));
    }

    function getCurrentTime(tz) {
      return new Date(new Date().toLocaleString("en-US", { timeZone: tz }));
    }

    function pad(n) {
      return n.toString().padStart(2, "0");
    }

    function formatTime(d) {
      return `${pad(d.getHours())}:${pad(d.getMinutes())}`;
    }

    function isOpen(now, start, end) {
      return now >= start && now < end;
    }

    function MarketSessionTracker() {
      const [tz, setTz] = React.useState("America/Montevideo");
      const [now, setNow] = React.useState(getCurrentTime(tz));

      React.useEffect(() => {
        const interval = setInterval(() => {
          setNow(getCurrentTime(tz));
          document.getElementById('clock').textContent = now.toLocaleString("es-UY", { timeZone: tz });
        }, 1000);
        return () => clearInterval(interval);
      }, [tz]);

      React.useEffect(() => {
        document.getElementById("timezone").addEventListener("change", (e) => {
          setTz(e.target.value);
        });
      }, []);

      return (
        <div className="space-y-6">
          <div className="overflow-x-auto">
            <table className="table-auto w-full text-left text-sm text-white border-separate border-spacing-y-2">
              <thead>
                <tr>
                  <th>Sesión</th>
                  <th>Abre</th>
                  <th>Cierra</th>
                  <th>Estado</th>
                </tr>
              </thead>
              <tbody>
                {sessions.map((s) => {
                  const start = parseTime(s.start, s.tz, tz);
                  const end = parseTime(s.end, s.tz, tz);
                  const active = isOpen(now, start, end);
                  return (
                    <tr key={s.name} className="bg-gray-800 rounded">
                      <td className="px-2 py-1">{s.name}</td>
                      <td className="px-2 py-1">{formatTime(start)}</td>
                      <td className="px-2 py-1">{formatTime(end)}</td>
                      <td className="px-2 py-1 font-bold">{active ? "En curso" : now < start ? "Próxima" : "Cerrada"}</td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>

          <div>
            <h2 className="text-lg font-bold mb-2">Solapamientos activos</h2>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-2 text-sm">
              {sessions.map((s1, i) =>
                sessions.map((s2, j) => {
                  if (i >= j) return null;
                  const s1Start = parseTime(s1.start, s1.tz, tz);
                  const s1End = parseTime(s1.end, s1.tz, tz);
                  const s2Start = parseTime(s2.start, s2.tz, tz);
                  const s2End = parseTime(s2.end, s2.tz, tz);
                  const overlap = Math.max(0, Math.min(s1End, s2End) - Math.max(s1Start, s2Start)) > 0;
                  const bothOpen = isOpen(now, s1Start, s1End) && isOpen(now, s2Start, s2End);
                  return (
                    <div key={s1.name + s2.name} className={`p-2 rounded ${bothOpen ? 'bg-green-600' : overlap ? 'bg-gray-600' : 'bg-gray-800'}`}>
                      {s1.name} y {s2.name}: {bothOpen ? "Coinciden ahora" : overlap ? "Tienen solapamiento" : "No coinciden"}
                    </div>
                  );
                })
              )}
            </div>
          </div>
        </div>
      );
    }

    ReactDOM.createRoot(document.getElementById('root')).render(<MarketSessionTracker />);
  </script>
</body>
</html>
